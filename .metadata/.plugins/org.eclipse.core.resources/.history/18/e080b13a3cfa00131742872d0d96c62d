package Main;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

import Core.Gui.GuiButton;
import Core.Gui.GuiPanel;
import Main.MIP.Author;
import Main.MIP.Drop;
import Main.MIP.Entity;

@SuppressWarnings("serial")
public class EdittorPanel extends GuiPanel {
	
	final GuiPanel owner;
	/**
	 * Format: ""
	 */
	final String listName;
	final int listIndex;
	Object value;
	
	List<JLabel> labels = new ArrayList<JLabel>();
	List<JTextField> fields = new ArrayList<JTextField>();
	
	GuiButton save;
	List<ListEdittor> edittors = new ArrayList<ListEdittor>();
	
	public EdittorPanel(int w, int h, GuiPanel owner, String listName, int index, Object value) {
		super(w, h, false);
		this.owner = owner;
		this.listName = listName;
		this.listIndex = index;
		this.value = value;
		
		this.initGui();
	}
	
	protected void initGui() {
		int buttonID = -1;
		int x = this.guiLeft + 10;
		int w = this.xSize - 20;
		int h = 20;
		int y = this.ySize - h - 10 - 20;
		this.save = new GuiButton(++buttonID, x, y, w, h, "Save", this, this);
		
		if (this.listName.equals("authors")) {
			this.labels.add(this.createLabel(10, 10, 140, 20, "Author's Name:"));
			this.fields.add(this.createTextFeld(150, 11, 200, 20, 100, this));
			
			this.labels.add(this.createLabel(10, 30, 140, 20, "Author's Twitter:      @"));
			this.fields.add(this.createTextFeld(150, 31, 200, 20, 100, this));
			
			Author a = (Author) this.value;
			
			this.fields.get(1).setText(a.twitterHandler);
			this.fields.get(0).setText(a.name);
			
		}
		else if (this.listName.equals("description")) {
			
		}
		else if (this.listName.equals("entities")) {
			this.labels.add(this.createLabel(10, 10, 140, 20, "Name:"));
			this.fields.add(this.createTextFeld(150, 11, 200, 20, 100, this));
			
			this.labels.add(this.createLabel(10, 30, 140, 20, "Type:"));
			this.fields.add(this.createTextFeld(150, 31, 200, 20, 100, this));
			
			this.labels.add(this.createLabel(10, 50, 140, 20, "Health:"));
			this.fields.add(this.createTextFeld(150, 51, 200, 20, 100, this));
			
			this.labels.add(this.createLabel(10, 70, 140, 20, "Spawn Height:"));
			this.labels.add(this.createLabel(20, 90, 130, 20, "Minimum:"));
			this.fields.add(this.createTextFeld(150, 91, 200, 20, 100, this));
			
			this.labels.add(this.createLabel(20, 110, 130, 20, "Maximum:"));
			this.fields.add(this.createTextFeld(150, 111, 200, 20, 100, this));
			
			ListEdittor spawnBiomes = new ListEdittor() {
				@Override
				public Object getDefaultObject() {
					return "biome";
				}
			};
			buttonID = spawnBiomes.init(this, buttonID, 360, 10, 200, 310, "Spawn Biomes");
			this.edittors.add(spawnBiomes);
			
			ListEdittor drops = new ListEdittor() {
				@Override
				public Object getDefaultObject() {
					Drop ret = new Drop();
					ret.name = "drop";
					return ret;
				}
			};
			buttonID = drops.init(this, buttonID, 10, 135, 150, 180, "Drops");
			this.edittors.add(drops);
			
			ListEdittor notes = new ListEdittor() {
				@Override
				public Object getDefaultObject() {
					return "note";
				}
			};
			buttonID = notes.init(this, buttonID, 190, 135, 150, 180, "Notes");
			this.edittors.add(notes);
			
			Entity e = (Entity) this.value;
			this.fields.get(4).setText(e.spawn_height_maximum);
			this.fields.get(3).setText(e.spawn_height_minimum);
			this.fields.get(2).setText(e.health);
			this.fields.get(1).setText(e.type);
			this.fields.get(0).setText(e.name);
			
		}
		else if (this.listName.equals("items")) {
			
		}
		else if (this.listName.equals("blocks")) {
			
		}
		
	}
	
	public void refreshFields() {
		if (this.listName.equalsIgnoreCase("Authors")) {
			
		}
		else if (this.listName.equalsIgnoreCase("Entities")) {
			Entity e = (Entity) this.value;
			
			this.fields.get(4).setText(e.spawn_height_maximum);
			this.fields.get(3).setText(e.spawn_height_minimum);
			this.fields.get(2).setText(e.health);
			this.fields.get(1).setText(e.type);
			this.fields.get(0).setText(e.name);
			
			this.edittors.get(0).refreshList(e.spawn_biomes);
			this.edittors.get(1).refreshList(e.drops);
			this.edittors.get(2).refreshList(e.notes);
			
		}
	}
	
	public void saveFields() {
		if (this.listName.equalsIgnoreCase("authors")) {
			Author a = new Author();
			
			a.name = this.fields.get(0).getText();
			a.twitterHandler = this.fields.get(1).getText();
			
			this.value = a;
		}
		else if (this.listName.equals("entities")) {
			Entity e = new Entity();
			
			e.name = this.fields.get(0).getText();
			e.type = this.fields.get(1).getText();
			e.health = this.fields.get(2).getText();
			
			this.value = e;
		}
		
	}
	
	@Override
	public void buttonPressed(GuiButton button) {
		if (button.id == this.save.id) {
			
			this.saveFields();
			
			((Gui) this.owner).passRefreshedData(this.listName, this.listIndex, this.value);
			
			JFrame frame = (JFrame) SwingUtilities.getRoot(this);
			frame.dispose();
			
		}
		else {
			if (this.listName.equalsIgnoreCase("Entities")) {
				Entity e = (Entity)this.value;
				ListEdittor edittor = null;
				
				edittor = this.edittors.get(0);
				if (edittor.isValidButton(button.id)) {
					Object[] objs = edittor.buttonPress(button.id, e.spawn_biomes);
					e.spawn_biomes = new String[objs.length];
					for (int j = 0; j < objs.length; j++) {
						e.spawn_biomes[j] = (String)objs[j];
					}
				}
				edittor = this.edittors.get(1);
				if (edittor.isValidButton(button.id)) {
					Object[] objs = edittor.buttonPress(button.id, e.drops);
					e.drops = new Drop[objs.length];
					for (int j = 0; j < objs.length; j++) {
						e.drops[j] = (Drop)objs[j];
					}
				}
				edittor = this.edittors.get(2);
				if (edittor.isValidButton(button.id)) {
					Object[] objs = edittor.buttonPress(button.id, e.notes);
					e.notes = new String[objs.length];
					for (int j = 0; j < objs.length; j++) {
						e.notes[j] = (String)objs[j];
					}
				}
				
			}
			
			this.refreshFields();
		}
	}
}
