package Main.edittor;

import javax.swing.AbstractListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;

import Core.Gui.GuiButton;
import Core.Gui.GuiPanel;

@SuppressWarnings("rawtypes")
public abstract class ListEdittor {
	
	GuiPanel owner;
	JLabel title;
	GuiButton add;
	GuiButton remove;
	GuiButton edit;
	public JList list;
	
	public ListEdittor() {
		
	}
	
	public int init(GuiPanel gui, int buttonID, int x, int y, int w, int h, String type) {
		int left = x + w;
		
		this.owner = gui;
		
		this.title = gui.createLabel(x, y, 100, 20, type + ":");
		this.add = new GuiButton(++buttonID, left - 55 - 16 - 4, y + 1, 16, 16, "+", gui, gui);
		this.remove = new GuiButton(++buttonID, left - 35 - 16 - 4, y + 1, 16, 16, "-", gui, gui);
		this.edit = new GuiButton(++buttonID, left - 30 - 5, y + 1, 30, 16, "Edit", gui, gui);
		this.list = gui.createJList(x + 20, y + 20, w, h, new Object[0]);
		
		return buttonID;
	}
	
	@SuppressWarnings({
			"unchecked", "serial"
	})
	public void refreshList(final Object[] newContent) {
		this.list.setModel(new AbstractListModel() {
			
			@Override
			public int getSize() {
				return newContent.length;
			}
			
			@Override
			public Object getElementAt(int index) {
				return newContent[index];
			}
			
		});
	}
	
	public Object[] buttonPress(int id, Object[] data) {
		Object[] newData = data;
		if (id == this.add.id) {
			newData = new Object[data.length + 1];
			for (int i = 0; i < data.length; i++) {
				newData[i] = data[i];
			}
			newData[data.length] = this.getDefaultObject();
		}
		else if (id == this.remove.id) {
			int remIndex = this.list.getSelectedIndex();
			if (remIndex >= 0) {
				newData = new Object[data.length - 1];
				
				for (int i = 0; i < data.length; i++) {
					if (i < remIndex) {
						newData[i] = data[i];
					}
					else if (i < newData.length) {
						newData[i] = data[i + 1];
					}
				}
				
			}
		}
		else if (id == this.edit.id) {
			if (this.list.getSelectedIndex() >= 0) {
				JFrame frame = new JFrame("Editing: " + this.list.getSelectedValue().toString());
				frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				frame.add(new EdittorPanel(600, 400, this.owner, this.getName(), this.list
						.getSelectedIndex(), this.list.getSelectedValue()));
				frame.setSize(600, 400);
				frame.setResizable(false);
				frame.setLocationRelativeTo(this.owner);
				frame.setVisible(true);
			}
		}
		
		return newData;
		
	}
	
	public boolean isValidButton(int id) {
		return id >= this.getMinBID() && id <= this.getMaxBID();
	}
	
	public int getMinBID() {
		return this.add.id;
	}
	
	public int getMaxBID() {
		return this.edit.id;
	}
	
	public abstract Object getDefaultObject();
	
	public String getName() {
		return this.title.getText().substring(0, this.title.getText().length() - 1).toLowerCase();
	}
	
}
